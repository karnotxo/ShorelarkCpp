project('cshorelark', 'cpp',
    version : '1.0.0',
    default_options : [
        'cpp_std=c++17',
        'warning_level=3',
        'werror=true'
    ]
)

# Find clang-format and clang-tidy
clang_format = find_program('clang-format', required : false)
clang_tidy = find_program('clang-tidy', required : false)

# Configure source files for formatting
cpp_files = run_command('find', meson.source_root(), 
    '-type', 'f',
    '-name', '*.cc',
    '-o', '-name', '*.h',
    check: true
).stdout().strip().split('\n')

# Add clang-format custom target
if clang_format.found()
    run_target('format',
        command : [clang_format, '-i', cpp_files]
    )
endif

# Add clang-tidy custom target
if clang_tidy.found()
    run_target('tidy',
        command : [
            'python3', 
            join_paths(meson.source_root(), 'tools', 'run-clang-tidy.py'),
            '-clang-tidy-binary=' + clang_tidy.path(),
            '-header-filter=.*',
            cpp_files
        ]
    )
endif

# Create run-clang-tidy.py helper script
run_clang_tidy_script = '''
#!/usr/bin/env python3
import subprocess
import sys
import argparse
import multiprocessing
import os
import queue
import threading

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-clang-tidy-binary', default='clang-tidy')
    parser.add_argument('-header-filter', default='.*')
    parser.add_argument('files', nargs='+')
    return parser.parse_args()

def run_clang_tidy(args, queue, lock):
    while True:
        try:
            filename = queue.get_nowait()
        except queue.Empty:
            return

        cmd = [args.clang_tidy_binary,
               '-header-filter=' + args.header_filter,
               '-p', '.',
               filename]
        
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, err = proc.communicate()
        
        with lock:
            sys.stdout.write(output.decode('utf-8'))
            if len(err) > 0:
                sys.stderr.write(err.decode('utf-8'))

def main():
    args = parse_args()
    
    try:
        queue = queue.Queue()
        for filename in args.files:
            queue.put(filename)

        lock = threading.Lock()
        threads = []
        for _ in range(multiprocessing.cpu_count()):
            t = threading.Thread(target=run_clang_tidy,
                               args=(args, queue, lock))
            t.start()
            threads.append(t)

        for t in threads:
            t.join()

    except KeyboardInterrupt:
        print('\nCtrl-C detected, goodbye.')
        os._exit(1)

if __name__ == '__main__':
    main()
'''

# Create tools directory and write the script
run_command('mkdir', '-p', join_paths(meson.source_root(), 'tools'), check: true)
run_command('tee', join_paths(meson.source_root(), 'tools', 'run-clang-tidy.py'),
    input : run_clang_tidy_script,
    check : true
)
run_command('chmod', '+x', join_paths(meson.source_root(), 'tools', 'run-clang-tidy.py'),
    check : true
)

# Documentation option
option('build_docs', type : 'boolean', value : false, description : 'Build documentation')

# Find documentation tools if enabled
if get_option('build_docs')
    doxygen = find_program('doxygen', required : true)
    sphinx = find_program('sphinx-build', required : true)
    
    # Configure Doxygen
    conf_data = configuration_data()
    conf_data.set('PROJECT_NAME', 'CShorelark')
    conf_data.set('PROJECT_VERSION', meson.project_version())
    conf_data.set('OUTPUT_DIRECTORY', meson.current_build_dir() / 'docs/api')
    conf_data.set('GENERATE_HTML', 'YES')
    conf_data.set('GENERATE_XML', 'YES')
    
    doxyfile = configure_file(
        input : 'Doxyfile.in',
        output : 'Doxyfile',
        configuration : conf_data
    )
    
    # Doxygen target
    custom_target('doxygen',
        output : 'doxygen',
        command : [doxygen, doxyfile],
        build_by_default : true
    )
    
    # Sphinx target
    custom_target('sphinx',
        output : 'sphinx',
        command : [
            sphinx,
            '-b', 'html',
            '-Dbreathe_projects.CShorelark=' + meson.current_build_dir() / 'docs/api/xml',
            meson.current_source_dir() / 'docs/sphinx',
            meson.current_build_dir() / 'docs/sphinx'
        ],
        depends : 'doxygen',
        build_by_default : true
    )
endif

# Conan-provided dependencies
# These will be provided via the pkg-config files generated by Conan
fmt_dep = dependency('fmt')
spdlog_dep = dependency('spdlog')
date_dep = dependency('date')
ranges_v3_dep = dependency('range-v3')
span_lite_dep = dependency('span-lite')
tl_expected_dep = dependency('tl-expected')
tl_optional_dep = dependency('tl-optional')
imgui_dep = dependency('imgui')
catch2_dep = dependency('catch2')

# Common include directories
inc = include_directories('include')

# Subprojects
subdir('libs')
subdir('apps')